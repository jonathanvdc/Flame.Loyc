<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Flame</name>
  </assembly>
  <members>
    <member name="T:Flame.AccessExtensions">
      <summary>
 Extensions for access modifiers.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.DefinesType(Flame.IType,Flame.IType)">
      <summary>
 Gets a boolean that indicates whether the given type is equal to
 or defines the given type as a nested type, either directly or indirectly.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.SharesDeclaringAssembly(Flame.IType,Flame.IType)">
      <summary>
 Returns a boolean that tells whether the given types share their
 declaring assemblies.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.CanAccessMember(Flame.IType,Flame.IType,Flame.AccessModifier)">
      <summary>
 Gets a boolean value that indicates if the given type can access
 a member of the given declaring type with the given member access modifier,
 assuming that said declaring type can be accessed.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.CanAccess(Flame.IType,Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type can
 access the given other type or not.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.CanAccess(Flame.IType,Flame.ITypeMember)">
      <summary>
 Gets a boolean value that indicates whether the given type can
 access the given type member or not.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.CanAccess(Flame.ITypeMember,Flame.ITypeMember)">
      <summary>
 Gets a boolean value that indicates whether this type member can
 access the given other type member or not.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.FilterAccessible``1(Flame.IType,System.Collections.Generic.IEnumerable`1{T})">
      <summary>
 Filters out all inaccessible members in the given list of values.
 </summary>
    </member>
    <member name="P:Flame.AccessExtensions.IsGlobalPublic">
      <summary>
 Gets a boolean value that tells if this type is publically visible from
 the global scope.
 </summary>
    </member>
    <member name="P:Flame.AccessExtensions.IsGlobalPublic">
      <summary>
 Gets a boolean value that tells if this type member is publically visible from
 the global scope.
 </summary>
    </member>
    <member name="M:Flame.IMember.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.IMember.Name">
      <summary>
 Gets the member's name.
 </summary>
    </member>
    <member name="P:Flame.IMember.FullName">
      <summary>
 Gets the member's full name.
 </summary>
    </member>
    <member name="P:Flame.ITypeMember.DeclaringType">
      <summary>
 Gets the type that declared this member.
 </summary>
    </member>
    <member name="P:Flame.ITypeMember.IsStatic">
      <summary>
 Gets a boolean value that indicates whether the member is static or not.
 </summary>
    </member>
    <member name="T:Flame.IType">
      <summary>
 Defines common functionality for types.
 </summary>
    </member>
    <member name="M:Flame.IType.GetMembers">
      <summary>
 Gets the type's members.
 </summary>
    </member>
    <member name="M:Flame.IType.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IType.GetProperties">
      <summary>
 Gets the type's properties.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IType.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IType.GetConstructors">
      <summary>
 Gets the type's constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IType.AsContainerType">
      <summary>
 Gets this type as a container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IType.MakeArrayType(System.Int32)">
      <summary>
 Creates an array type that contains objects of the current type.
 </summary>
      <param name="Rank" />
      <returns />
    </member>
    <member name="M:Flame.IType.MakePointerType(Flame.PointerKind)">
      <summary>
 Creates a pointer type that points to a value of the current type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IType.MakeVectorType(System.Int32[])">
      <summary>
 Creates a vector type that contains objects of the current type.
 </summary>
      <param name="Dimensions" />
      <returns />
    </member>
    <member name="M:Flame.IType.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IType.MakeGenericType(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.IType.GetGenericDeclaration">
      <summary>
 Gets the type's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.IType.DeclaringNamespace">
      <summary>
 Gets the namespace that defined the type.
 </summary>
    </member>
    <member name="P:Flame.IType.IsContainerType">
      <summary>
 Gets a boolean value that indicates if the current type is a container type, like an array or a pointer.
 </summary>
    </member>
    <member name="P:Flame.IAttribute.AttributeType">
      <summary>
 Gets the attribute's type.
 </summary>
    </member>
    <member name="P:Flame.IAttribute.Value">
      <summary>
 Gets the attribute's value.
 </summary>
    </member>
    <member name="M:Flame.IConstructedAttribute.GetArguments">
      <summary>
 Gets the arguments that were passed to the attribute constructor.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.IConstructedAttribute.Constructor">
      <summary>
 Gets the constructor that was used to create this attribute.
 </summary>
    </member>
    <member name="T:Flame.ContainerTypeKind">
      <summary>
 Describes possible container types.
 </summary>
    </member>
    <member name="F:Flame.ContainerTypeKind.Array">
      <summary>
 An array container type.
 </summary>
    </member>
    <member name="F:Flame.ContainerTypeKind.Pointer">
      <summary>
 A pointer container type.
 </summary>
    </member>
    <member name="F:Flame.ContainerTypeKind.Vector">
      <summary>
 A vector container type
 </summary>
    </member>
    <member name="M:Flame.IContainerType.GetElementType">
      <summary>
 Gets the type of the object encompassed or referred to by the current container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IContainerType.AsArrayType">
      <summary>
 Returns this type as an array type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IContainerType.AsPointerType">
      <summary>
 Returns this type as a pointer type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IContainerType.AsVectorType">
      <summary>
 Returns this type as a vector type.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.IContainerType.ContainerKind">
      <summary>
 Gets the kind of container this type represents.
 </summary>
    </member>
    <member name="P:Flame.IArrayType.ArrayRank">
      <summary>
 Gets the number of dimensions in an array.
 </summary>
    </member>
    <member name="T:Flame.IPointerType">
      <summary>
 Represents a pointer type: an integer that points to the location in memory of an object.
 </summary>
    </member>
    <member name="T:Flame.IVectorType">
      <summary>
 Represents a vector type: an array with fixed dimensions.
 </summary>
    </member>
    <member name="M:Flame.IVectorType.GetDimensions">
      <summary>
 Gets the vector's dimensions.
 </summary>
    </member>
    <member name="M:Flame.IGenericMember.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IGenericMember.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.IGenericParameter.DeclaringMember">
      <summary>
 Gets the generic member that declared this parameter.
 </summary>
    </member>
    <member name="P:Flame.IGenericParameter.Constraint">
      <summary>
 Gets the generic parameter's constraint.
 </summary>
    </member>
    <member name="M:Flame.IParameter.IsAssignable(Flame.IType)">
      <summary>
 Gets a boolean value that indicates if an argument of the specified type can be assigned to the current parameter.
 </summary>
      <param name="Type">The potential argument's type.</param>
      <returns />
    </member>
    <member name="P:Flame.IParameter.ParameterType">
      <summary>
 Gets the parameter's (default) type.
 </summary>
    </member>
    <member name="M:Flame.IMethod.GetParameters">
      <summary>
 Gets the method's parameters.
 </summary>
    </member>
    <member name="M:Flame.IMethod.GetBaseMethods">
      <summary>
 Gets the method's base methods.
 </summary>
    </member>
    <member name="M:Flame.IMethod.Invoke(Flame.IBoundObject,System.Collections.Generic.IEnumerable`1{Flame.IBoundObject})">
      <summary>
 Invokes the method with the provided caller and arguments.
 </summary>
      <param name="Arguments" />
      <returns />
    </member>
    <member name="M:Flame.IMethod.MakeGenericMethod(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic method of this type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.IMethod.GetGenericDeclaration">
      <summary>
 Gets the method's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.IMethod.ReturnType">
      <summary>
 Gets the method's return type.
 </summary>
    </member>
    <member name="P:Flame.IMethod.IsConstructor">
      <summary>
 Gets a boolean value that indicates if this method is a constructor.
 </summary>
    </member>
    <member name="P:Flame.IAccessor.AccessorType">
      <summary>
 Gets the accessor's type.
 </summary>
    </member>
    <member name="P:Flame.IAccessor.DeclaringProperty">
      <summary>
 Gets the property this accessor belongs to.
 </summary>
    </member>
    <member name="M:Flame.INamespace.GetTypes">
      <summary>
 Gets the types that are declared in this namespace.
 </summary>
    </member>
    <member name="P:Flame.INamespace.DeclaringAssembly">
      <summary>
 Gets the assembly that declares this namespace.
 </summary>
    </member>
    <member name="M:Flame.IAssembly.CreateBinder">
      <summary>
 Creates a binder for this assembly.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IAssembly.GetEntryPoint">
      <summary>
 Gets the entry point method for this assembly.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.IAssembly.AssemblyVersion">
      <summary>
 Gets the assembly's version.
 </summary>
    </member>
    <member name="T:Flame.ISearcheableMember">
      <summary>
 Defines common functionality for searcheable members.
 </summary>
    </member>
    <member name="M:Flame.ISearcheableMember.GetType(System.String)">
      <summary>
 Gets the type with the specified name.
 </summary>
      <param name="Name" />
      <returns />
    </member>
    <member name="M:Flame.IProperty.GetAccessors">
      <summary>
 Gets the property's accessors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IProperty.GetIndexerParameters">
      <summary>
 Gets the indexer's parameters, if any.
 </summary>
    </member>
    <member name="P:Flame.IProperty.PropertyType">
      <summary>
 Gets the property's type.
 </summary>
    </member>
    <member name="P:Flame.IField.FieldType">
      <summary>
 Gets the field's type.
 </summary>
    </member>
    <member name="M:Flame.MemberExtensions.Is(Flame.IType,Flame.IType)">
      <summary>
 Gets a boolean value that indicates if this type can be stored in a variable of the provided type.
 </summary>
      <param name="Other" />
      <returns />
    </member>
    <member name="M:Flame.MemberExtensions.GetParent(Flame.IType)">
      <summary>
 Gets the type's parent type.
 </summary>
      <param name="Other" />
      <returns />
    </member>
    <member name="P:Flame.MemberExtensions.IsGenericParameter">
      <summary>
 Gets a boolean value that indicates if the given type is a generic parameter.
 </summary>
      <param name="Type" />
      <returns />
    </member>
    <member name="M:Flame.MemberLookup.GetAllFields(Flame.IType)">
      <summary>
 Gets all fields - locally declared and inherited - of the provided type.
 </summary>
      <remarks>
 This implementation tries to accurately represent that fields' layout.
 </remarks>
    </member>
    <member name="M:Flame.MemberSelection.GetBestProperties(System.Collections.Generic.IEnumerable`1{Flame.IProperty},Flame.IType,System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets the properties that match the specified parameter types best.
 </summary>
      <param name="ParameterTypes" />
      <returns />
    </member>
    <member name="M:Flame.MemberSelection.GetBestMethods(System.Collections.Generic.IEnumerable`1{Flame.IMethod},Flame.IType,Flame.IType[])">
      <summary>
 Gets the methods that match the specified parameter types best.
 </summary>
      <param name="ParameterTypes" />
      <returns />
    </member>
    <member name="M:Flame.MemberSelection.GetBestMethods(System.Collections.Generic.IEnumerable`1{Flame.IMethod},Flame.IType[])">
      <summary>
 Gets the methods that match the specified parameter types best.
 </summary>
      <param name="ParameterTypes" />
      <returns />
    </member>
    <member name="M:Flame.MemberSelection.FilterBaseMethods(Flame.IMethod[])">
      <summary>
 Filters out all method in the given array of method that have an override or implementation which is also present in the given array.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.GetAccessor(Flame.IProperty,Flame.AccessorType)">
      <summary>
 Gets the property's accessor of the provided accessor type.
 </summary>
      <param name="Property" />
      <returns />
    </member>
    <member name="M:Flame.PropertyExtensions.GetGetAccessor(Flame.IProperty)">
      <summary>
 Gets the property's get accessor.
 </summary>
      <param name="Property" />
      <returns />
    </member>
    <member name="M:Flame.PropertyExtensions.GetSetAccessor(Flame.IProperty)">
      <summary>
 Gets the property's set accessor.
 </summary>
      <param name="Property" />
      <returns />
    </member>
    <member name="M:Flame.PropertyExtensions.GetAddAccessor(Flame.IProperty)">
      <summary>
 Gets the property's add accessor.
 </summary>
      <param name="Property" />
      <returns />
    </member>
    <member name="M:Flame.PropertyExtensions.GetRemoveAccessor(Flame.IProperty)">
      <summary>
 Gets the property's remove accessor.
 </summary>
      <param name="Property" />
      <returns />
    </member>
    <member name="M:Flame.FieldExtensions.GetField(Flame.IField,Flame.IBoundObject)">
      <summary>
 Gets the field's value for the specified object.
 </summary>
      <param name="Target" />
      <returns />
    </member>
    <member name="M:Flame.FieldExtensions.SetField(Flame.IField,Flame.IBoundObject,Flame.IBoundObject)">
      <summary>
 Sets the field's value on the specified object.
 </summary>
      <param name="Value" />
    </member>
    <member name="P:Flame.IEnvironment.Name">
      <summary>
 Gets the environment's name.
 </summary>
    </member>
    <member name="P:Flame.IEnvironment.RootType">
      <summary>
 Gets the root type for this environment, if any.
 </summary>
    </member>
    <member name="P:Flame.IEnvironment.EnumerableType">
      <summary>
 Gets the generic enumerable type declaration for this environment, if any.
 </summary>
    </member>
    <member name="P:Flame.IEnvironment.EnumeratorType">
      <summary>
 Gets the generic enumerator type declaration for this environment, if any.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.IsImplementationOf(Flame.IMethod,Flame.IMethod)">
      <summary>
 Gets a boolean value that tells if this method implements
 the given base method.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.GetImplementation(Flame.IMethod,Flame.IType)">
      <summary>
 Gets this method's implementation in the given type.
 If no implementation can be found, null is returned.
 </summary>
      <remarks>
 Note: a virtual method without overrides in the given type could
 arguably be considered its own, albeit trivial, implementation.
 This method still returns null in that case, however.
 </remarks>
    </member>
    <member name="P:Flame.MethodExtensions.HasReturnValue">
      <summary>
 Gets a boolean value that indicates whether the given method has a
 non-null, non-void return value.
 </summary>
    </member>
    <member name="T:Flame.OperatorCache">
      <summary>
 Describes an object that caches operator overload methods.
 </summary>
    </member>
    <member name="M:Flame.OperatorExtensions.GetAllOperatorOverloads(Flame.Operator,System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets all operator methods associated with the given argument types for the given operator.
 </summary>
    </member>
    <member name="M:Flame.OperatorExtensions.GetOperatorOverload(Flame.Operator,System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets the best operator overload for the given operator with the given argument types.
 </summary>
    </member>
    <member name="M:Flame.GenericNameExtensions.GetGenericFreeName(Flame.IGenericMember)">
      <summary>
 Gets the member's name, without generic parameters.
 </summary>
      <param name="Member" />
      <returns />
    </member>
    <member name="M:Flame.GenericNameExtensions.GetGenericFreeFullName(Flame.IGenericMember)">
      <summary>
 Gets the member's full name, without generic parameters.
 </summary>
      <param name="Member" />
      <returns />
    </member>
    <member name="T:Flame.IGenericConstraint">
      <summary>
 Describes common functionality for all generic constraints.
 </summary>
    </member>
    <member name="M:Flame.IGenericConstraint.Satisfies(Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type argument satisfies the generic constraint.
 </summary>
    </member>
    <member name="M:Flame.GenericConstraintExtensions.ExtractBaseTypes(Flame.IGenericConstraint)">
      <summary>
 Extracts all required base types from this generic constraint.
 </summary>
    </member>
    <member name="M:Flame.GenericConstraintExtensions.ExtractBaseTypes(System.Collections.Generic.IEnumerable`1{Flame.IGenericConstraint})">
      <summary>
 Extracts all required base types from these generic constraints.
 </summary>
    </member>
    <member name="M:Flame.GenericConstraintExtensions.HasConstraint``1(Flame.IGenericConstraint)">
      <summary>
 Gets a boolean value that indicates if the generic constraint requires a constraint of type 'T' to be met.
 </summary>
    </member>
    <member name="M:Flame.GenericConstraintExtensions.HasConstraint``1(System.Collections.Generic.IEnumerable`1{Flame.IGenericConstraint})">
      <summary>
 Gets a boolean value that indicates if any of the given generic constraints require a constraint of type 'T' to be met.
 </summary>
    </member>
    <member name="T:Flame.TypeConstraint">
      <summary>
 A generic constraint that specifies that a value of the type argument should be assignable to a specific type.
 </summary>
    </member>
    <member name="M:Flame.TypeConstraint.Satisfies(Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type argument satisfies the generic constraint.
 </summary>
    </member>
    <member name="T:Flame.AndConstraint">
      <summary>
 A generic constraint that specifies that the type argument should satisfy all given child constraints.
 </summary>
    </member>
    <member name="M:Flame.AndConstraint.Satisfies(Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type argument satisfies the generic constraint.
 </summary>
    </member>
    <member name="T:Flame.ValueTypeConstraint">
      <summary>
 A constraint that is satisfied by value types.
 </summary>
    </member>
    <member name="M:Flame.ValueTypeConstraint.Satisfies(Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type argument satisfies the generic constraint.
 </summary>
    </member>
    <member name="T:Flame.ReferenceTypeConstraint">
      <summary>
 A constraint that is satisfied by reference types.
 </summary>
    </member>
    <member name="M:Flame.ReferenceTypeConstraint.Satisfies(Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type argument satisfies the generic constraint.
 </summary>
    </member>
    <member name="T:Flame.EnumConstraint">
      <summary>
 A constraint that is satisfied by enum types.
 </summary>
    </member>
    <member name="M:Flame.EnumConstraint.Satisfies(Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type argument satisfies the generic constraint.
 </summary>
    </member>
    <member name="M:Flame.PrimitiveMethod.GetParameters">
      <summary>
 Gets the method's parameters.
 </summary>
    </member>
    <member name="M:Flame.PrimitiveMethod.Invoke(Flame.IBoundObject,System.Collections.Generic.IEnumerable`1{Flame.IBoundObject})">
      <summary>
 Invokes the method with the provided caller and arguments.
 </summary>
      <param name="Arguments" />
      <returns />
    </member>
    <member name="M:Flame.PrimitiveMethod.GetBaseMethods">
      <summary>
 Gets the method's base methods.
 </summary>
    </member>
    <member name="M:Flame.PrimitiveMethod.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.PrimitiveMethod.MakeGenericMethod(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic method of this type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.PrimitiveMethod.GetGenericDeclaration">
      <summary>
 Gets the method's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.PrimitiveMethod.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.PrimitiveMethod.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="T:Flame.DescriptionAttribute">
      <summary>
 Defines an attribute that captures a description or documentation,
 such as this comment.
 </summary>
    </member>
    <member name="P:Flame.DescriptionAttribute.Tag">
      <summary>
 Gets this description's tag, which identifies the type of description.
 </summary>
    </member>
    <member name="P:Flame.DescriptionAttribute.Attributes">
      <summary>
 Gets this description's attributes.
 </summary>
    </member>
    <member name="P:Flame.DescriptionAttribute.Description">
      <summary>
 Gets the actual description.
 </summary>
    </member>
    <member name="P:Flame.DescriptionAttribute.Contents">
      <summary>
 Gets the description attribute as a markup node.
 </summary>
    </member>
    <member name="T:Flame.EnumerableAttribute">
      <summary>
 An attribute for enumerable base types.
 </summary>
    </member>
    <member name="P:Flame.IBinder.Environment">
      <summary>
 Gets the environment for this binder.
 </summary>
    </member>
    <member name="P:Flame.BinderBase.Environment">
      <summary>
 Gets the environment for this binder.
 </summary>
    </member>
    <member name="M:Flame.IGenericParameterBuilder.AddConstraint(Flame.IGenericConstraint)">
      <summary>
 Adds a constraint to the generic parameter.
 </summary>
    </member>
    <member name="M:Flame.GenericParameterBuilderExtensions.AddTypeConstraint(Flame.IGenericParameterBuilder,Flame.IType)">
      <summary>
 Adds a type constraint to the generic parameter.
 </summary>
      <param name="TypeConstraint" />
    </member>
    <member name="M:Flame.IntersectionType.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.AsContainerType">
      <summary>
 Gets this type as a container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.GetConstructors">
      <summary>
 Gets the type's constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.GetGenericTypeDeclaration">
      <summary>
 Gets the type's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.GetMembers">
      <summary>
 Gets the type's members.
 </summary>
    </member>
    <member name="M:Flame.IntersectionType.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.GetProperties">
      <summary>
 Gets the type's properties.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.MakeArrayType(System.Int32)">
      <summary>
 Creates an array type that contains objects of the current type.
 </summary>
      <param name="Rank" />
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.MakeGenericType(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.MakePointerType(Flame.PointerKind)">
      <summary>
 Creates a pointer type that points to a value of the current type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IntersectionType.MakeVectorType(System.Int32[])">
      <summary>
 Creates a vector type that contains objects of the current type.
 </summary>
      <param name="Dimensions" />
      <returns />
    </member>
    <member name="M:Flame.MethodType.GetBaseMethods">
      <summary>
 Gets the method's base methods.
 </summary>
    </member>
    <member name="M:Flame.MethodType.GetGenericMethodDeclaration">
      <summary>
 Gets the method's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.GetParameters">
      <summary>
 Gets the method's parameters.
 </summary>
    </member>
    <member name="M:Flame.MethodType.Invoke(Flame.IBoundObject,System.Collections.Generic.IEnumerable`1{Flame.IBoundObject})">
      <summary>
 Invokes the method with the provided caller and arguments.
 </summary>
      <param name="Arguments" />
      <returns />
    </member>
    <member name="M:Flame.MethodType.MakeGenericMethod(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic method of this type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.MethodType.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.AsContainerType">
      <summary>
 Gets this type as a container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.GetConstructors">
      <summary>
 Gets the type's constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.GetGenericTypeDeclaration">
      <summary>
 Gets the type's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.GetMembers">
      <summary>
 Gets the type's members.
 </summary>
    </member>
    <member name="M:Flame.MethodType.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.GetProperties">
      <summary>
 Gets the type's properties.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.MakeArrayType(System.Int32)">
      <summary>
 Creates an array type that contains objects of the current type.
 </summary>
      <param name="Rank" />
      <returns />
    </member>
    <member name="M:Flame.MethodType.MakeGenericType(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.MethodType.MakePointerType(Flame.PointerKind)">
      <summary>
 Creates a pointer type that points to a value of the current type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.MethodType.MakeVectorType(System.Int32[])">
      <summary>
 Creates a vector type that contains objects of the current type.
 </summary>
      <param name="Dimensions" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.GetMembers">
      <summary>
 Gets the type's members.
 </summary>
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.GetProperties">
      <summary>
 Gets the type's properties.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.GetConstructors">
      <summary>
 Gets the type's constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.AsContainerType">
      <summary>
 Gets this type as a container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.MakeArrayType(System.Int32)">
      <summary>
 Creates an array type that contains objects of the current type.
 </summary>
      <param name="Rank" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.MakePointerType(Flame.PointerKind)">
      <summary>
 Creates a pointer type that points to a value of the current type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.MakeVectorType(System.Int32[])">
      <summary>
 Creates a vector type that contains objects of the current type.
 </summary>
      <param name="Dimensions" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.GetGenericDeclaration">
      <summary>
 Gets the type's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.MakeGenericType(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitivesNamespace.GetTypes">
      <summary>
 Gets the types that are declared in this namespace.
 </summary>
    </member>
    <member name="M:Flame.Primitives.PrimitivesNamespace.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.HashCodeProviderType.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.GetHashCodeImplementation`1.Invoke(Flame.IBoundObject,System.Collections.Generic.IEnumerable`1{Flame.IBoundObject})">
      <summary>
 Invokes the method with the provided caller and arguments.
 </summary>
      <param name="Arguments" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveParameter.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveParameter.IsAssignable(Flame.IType)">
      <summary>
 Gets a boolean value that indicates if an argument of the specified type can be assigned to the current parameter.
 </summary>
      <param name="Type">The potential argument's type.</param>
      <returns />
    </member>
    <member name="P:Flame.Primitives.PrimitiveParameter.FullName">
      <summary>
 Gets the member's full name.
 </summary>
    </member>
    <member name="P:Flame.Primitives.PrimitiveParameter.Name">
      <summary>
 Gets the member's name.
 </summary>
    </member>
    <member name="P:Flame.Primitives.PrimitiveParameter.ParameterType">
      <summary>
 Gets the parameter's (default) type.
 </summary>
    </member>
    <member name="M:Flame.Primitives.EquatableType.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.GetProperties">
      <summary>
 Gets the type's properties.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.GetConstructors">
      <summary>
 Gets the type's constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.GetMembers">
      <summary>
 Gets the type's members.
 </summary>
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.MakeArrayType(System.Int32)">
      <summary>
 Creates an array type that contains objects of the current type.
 </summary>
      <param name="Rank" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.MakeVectorType(System.Int32[])">
      <summary>
 Creates a vector type that contains objects of the current type.
 </summary>
      <param name="Dimensions" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.MakePointerType(Flame.PointerKind)">
      <summary>
 Creates a pointer type that points to a value of the current type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.MakeGenericType(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.GetGenericDeclaration">
      <summary>
 Gets the type's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.AsContainerType">
      <summary>
 Gets this type as a container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.EqualsImplementation`1.Invoke(Flame.IBoundObject,System.Collections.Generic.IEnumerable`1{Flame.IBoundObject})">
      <summary>
 Invokes the method with the provided caller and arguments.
 </summary>
      <param name="Arguments" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.GetMembers">
      <summary>
 Gets the type's members.
 </summary>
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.GetProperties">
      <summary>
 Gets the type's properties.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.GetConstructors">
      <summary>
 Gets the type's constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.AsContainerType">
      <summary>
 Gets this type as a container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.MakeArrayType(System.Int32)">
      <summary>
 Creates an array type that contains objects of the current type.
 </summary>
      <param name="Rank" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.MakePointerType(Flame.PointerKind)">
      <summary>
 Creates a pointer type that points to a value of the current type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.MakeVectorType(System.Int32[])">
      <summary>
 Creates a vector type that contains objects of the current type.
 </summary>
      <param name="Dimensions" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.GetGenericDeclaration">
      <summary>
 Gets the type's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.MakeGenericType(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveNumberType`1.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.PrimitiveFloatType`1.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.CharPrimitiveType.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.GetMembers">
      <summary>
 Gets the type's members.
 </summary>
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.GetProperties">
      <summary>
 Gets the type's properties.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.GetConstructors">
      <summary>
 Gets the type's constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.AsContainerType">
      <summary>
 Gets this type as a container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.MakeArrayType(System.Int32)">
      <summary>
 Creates an array type that contains objects of the current type.
 </summary>
      <param name="Rank" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.MakePointerType(Flame.PointerKind)">
      <summary>
 Creates a pointer type that points to a value of the current type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.MakeVectorType(System.Int32[])">
      <summary>
 Creates a vector type that contains objects of the current type.
 </summary>
      <param name="Dimensions" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.GetGenericDeclaration">
      <summary>
 Gets the type's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.MakeGenericType(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Attributes.ConstructedAttribute.GetArguments">
      <summary>
 Gets the arguments that were passed to the attribute constructor.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.Attributes.ConstructedAttribute.AttributeType">
      <summary>
 Gets the attribute's type.
 </summary>
    </member>
    <member name="P:Flame.Attributes.ConstructedAttribute.Value">
      <summary>
 Gets the attribute's value.
 </summary>
    </member>
    <member name="P:Flame.Binding.NamespaceTreeBinder.Environment">
      <summary>
 Gets the environment for this binder.
 </summary>
    </member>
    <member name="P:Flame.Binding.DualBinder.Environment">
      <summary>
 Gets the environment for this binder.
 </summary>
    </member>
    <member name="T:Flame.Binding.CachingBinder">
      <summary>
 A binder that performs a type lookup only once, and then caches the result.
 </summary>
    </member>
    <member name="P:Flame.Binding.CachingBinder.Environment">
      <summary>
 Gets the environment for this binder.
 </summary>
    </member>
    <member name="M:Flame.Build.AbstractMethod.MakeGenericMethod(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic method of this type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.Build.AbstractMethod.GetGenericDeclaration">
      <summary>
 Gets the method's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.TemplatedMethod.GetParameters">
      <summary>
 Gets the method's parameters.
 </summary>
    </member>
    <member name="M:Flame.Build.TemplatedMethod.GetBaseMethods">
      <summary>
 Gets the method's base methods.
 </summary>
    </member>
    <member name="M:Flame.Build.TemplatedMethod.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.TemplatedMethod.MakeGenericMethod(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic method of this type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.Build.TemplatedMethod.GetGenericDeclaration">
      <summary>
 Gets the method's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.TemplatedMethod.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.TemplatedMethod.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.VirtualMethod.Invoke(Flame.IBoundObject,System.Collections.Generic.IEnumerable`1{Flame.IBoundObject})">
      <summary>
 Invokes the method with the provided caller and arguments.
 </summary>
      <param name="Arguments" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedAssembly.GetTypes">
      <summary>
 Gets the types that are declared in this namespace.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedAssembly.CreateBinder">
      <summary>
 Creates a binder for this assembly.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedAssembly.GetEntryPoint">
      <summary>
 Gets the entry point method for this assembly.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedMethod.GetParameters">
      <summary>
 Gets the method's parameters.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedMethod.GetBaseMethods">
      <summary>
 Gets the method's base methods.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedMethod.MakeGenericMethod(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic method of this type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedMethod.GetGenericDeclaration">
      <summary>
 Gets the method's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedMethod.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedMethod.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedMethod.Invoke(Flame.IBoundObject,System.Collections.Generic.IEnumerable`1{Flame.IBoundObject})">
      <summary>
 Invokes the method with the provided caller and arguments.
 </summary>
      <param name="Arguments" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedParameter.IsAssignable(Flame.IType)">
      <summary>
 Gets a boolean value that indicates if an argument of the specified type can be assigned to the current parameter.
 </summary>
      <param name="Type">The potential argument's type.</param>
      <returns />
    </member>
    <member name="P:Flame.Build.DescribedParameter.ParameterType">
      <summary>
 Gets the parameter's (default) type.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedMember.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.GetMembers">
      <summary>
 Gets the type's members.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedContainerType.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.GetProperties">
      <summary>
 Gets the type's properties.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.GetConstructors">
      <summary>
 Gets the type's constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.MakeArrayType(System.Int32)">
      <summary>
 Creates an array type that contains objects of the current type.
 </summary>
      <param name="Rank" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.GetElementType">
      <summary>
 Gets the type of the object encompassed or referred to by the current container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.AsArrayType">
      <summary>
 Returns this type as an array type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.AsPointerType">
      <summary>
 Returns this type as a pointer type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.AsContainerType">
      <summary>
 Gets this type as a container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.MakePointerType(Flame.PointerKind)">
      <summary>
 Creates a pointer type that points to a value of the current type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.MakeVectorType(System.Int32[])">
      <summary>
 Creates a vector type that contains objects of the current type.
 </summary>
      <param name="Dimensions" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.AsVectorType">
      <summary>
 Returns this type as a vector type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.MakeGenericType(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedContainerType.GetGenericDeclaration">
      <summary>
 Gets the type's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedArrayType.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedArrayType.GetProperties">
      <summary>
 Gets the type's properties.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedProperty.GetAccessors">
      <summary>
 Gets the property's accessors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedProperty.GetIndexerParameters">
      <summary>
 Gets the indexer's parameters, if any.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedVectorType.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedVectorType.GetDimensions">
      <summary>
 Gets the vector's dimensions.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.AddConstraint(Flame.IGenericConstraint)">
      <summary>
 Adds a constraint to the generic parameter.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.GetMembers">
      <summary>
 Gets the type's members.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.GetProperties">
      <summary>
 Gets the type's properties.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.GetConstructors">
      <summary>
 Gets the type's constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.AsContainerType">
      <summary>
 Gets this type as a container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.MakeArrayType(System.Int32)">
      <summary>
 Creates an array type that contains objects of the current type.
 </summary>
      <param name="Rank" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.MakePointerType(Flame.PointerKind)">
      <summary>
 Creates a pointer type that points to a value of the current type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.MakeVectorType(System.Int32[])">
      <summary>
 Creates a vector type that contains objects of the current type.
 </summary>
      <param name="Dimensions" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.MakeGenericType(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.GetGenericDeclaration">
      <summary>
 Gets the type's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.IsAssignable(Flame.IType)">
      <summary>
 Gets a boolean value that indicates if an argument of the specified type can be assigned to the current parameter.
 </summary>
      <param name="Type">The potential argument's type.</param>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.GetMembers">
      <summary>
 Gets the type's members.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedType.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.GetProperties">
      <summary>
 Gets the type's properties.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.GetConstructors">
      <summary>
 Gets the type's constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.AsContainerType">
      <summary>
 Gets this type as a container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.MakeArrayType(System.Int32)">
      <summary>
 Creates an array type that contains objects of the current type.
 </summary>
      <param name="Rank" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.MakePointerType(Flame.PointerKind)">
      <summary>
 Creates a pointer type that points to a value of the current type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.MakeVectorType(System.Int32[])">
      <summary>
 Creates a vector type that contains objects of the current type.
 </summary>
      <param name="Dimensions" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.MakeGenericType(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedType.GetGenericDeclaration">
      <summary>
 Gets the type's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="T:Flame.Build.GenericResolvingConverter">
      <summary>
 A type converter that resolves type parameters based on a generic resolver.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedGenericMethodInstance.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericMethodInstance.GetParameters">
      <summary>
 Gets the method's parameters.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedGenericMethodInstance.GetBaseMethods">
      <summary>
 Gets the method's base methods.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedGenericMethodInstance.GetGenericDeclaration">
      <summary>
 Gets the method's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericMethodInstance.MakeGenericMethod(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic method of this type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericMethodInstance.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericMethodInstance.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericMethodInstance.Invoke(Flame.IBoundObject,System.Collections.Generic.IEnumerable`1{Flame.IBoundObject})">
      <summary>
 Invokes the method with the provided caller and arguments.
 </summary>
      <param name="Arguments" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericFieldInstance.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericPropertyInstance.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericPropertyInstance.GetAccessors">
      <summary>
 Gets the property's accessors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericPropertyInstance.GetIndexerParameters">
      <summary>
 Gets the indexer's parameters, if any.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.AsContainerType">
      <summary>
 Gets this type as a container type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.GetBaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.GetConstructors">
      <summary>
 Gets the type's constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.GetFields">
      <summary>
 Gets the type's fields.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.GetGenericDeclaration">
      <summary>
 Gets the type's generic declaration.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.GetMembers">
      <summary>
 Gets the type's members.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.GetMethods">
      <summary>
 Gets the type's methods, excluding any constructors.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.GetProperties">
      <summary>
 Gets the type's properties.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.GetTypes">
      <summary>
 Gets the types that are declared in this namespace.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.MakeArrayType(System.Int32)">
      <summary>
 Creates an array type that contains objects of the current type.
 </summary>
      <param name="Rank" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.MakeGenericType(System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets a generic type with the provided type arguments.
 </summary>
      <param name="TypeArguments" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.MakePointerType(Flame.PointerKind)">
      <summary>
 Creates a pointer type that points to a value of the current type.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.MakeVectorType(System.Int32[])">
      <summary>
 Creates a vector type that contains objects of the current type.
 </summary>
      <param name="Dimensions" />
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.GetGenericArguments">
      <summary>
 Gets the method's generic arguments.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericTypeInstance.GetGenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="T:Flame.Build.TypeComparerBase`1">
      <summary>
 Describes a generic type comparer: a class that compares two types and produces a result based on that.
 </summary>
    </member>
    <member name="M:Flame.Build.TypeComparerBase`1.CompareIncompatible(Flame.IType,Flame.IType)">
      <summary>
 Compares two structurally incompatible types.
 </summary>
    </member>
    <member name="M:Flame.Build.TypeComparerBase`1.CompareUnknown(Flame.IType,Flame.IType)">
      <summary>
 Compares two types that have an unknown structure.
 </summary>
    </member>
    <member name="M:Flame.Build.TypeComparerBase`1.CompareGenericInstances(Flame.IType,Flame.IType)">
      <summary>
 Compares two generic type instances.
 </summary>
    </member>
    <member name="M:Flame.Build.TypeEqualityComparer.CompareIncompatible(Flame.IType,Flame.IType)">
      <summary>
 Compares two structurally incompatible types.
 </summary>
    </member>
    <member name="T:Flame.Build.ScopedTypeEqualityComparer">
      <summary>
 A type equality comparer that assumes that type parameters with equal names are equal.
 </summary>
    </member>
    <member name="T:Flame.Build.GenericInstanceComparer">
      <summary>
 Compares types and decides whether the second is a possible generic instantiation of the first.
 </summary>
    </member>
    <member name="M:Flame.Build.GenericInstanceComparer.CompareIncompatible(Flame.IType,Flame.IType)">
      <summary>
 Compares two structurally incompatible types.
 </summary>
    </member>
    <member name="T:Flame.Build.TypeMappingConverter">
      <summary>
 A type converter that maps specific types to specific other types.
 </summary>
    </member>
    <member name="T:Flame.Build.TypeParameterConverter">
      <summary>
 A type converter that converts type parameters to a type parameter with the same name of a generic member.
 </summary>
    </member>
    <member name="T:Flame.Build.CompositeConverter`3">
      <summary>
 A generic converter that is the composition of two conversion functions.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedRetypedParameter.GetAttributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedRetypedParameter.IsAssignable(Flame.IType)">
      <summary>
 Gets a boolean value that indicates if an argument of the specified type can be assigned to the current parameter.
 </summary>
      <param name="Type">The potential argument's type.</param>
      <returns />
    </member>
    <member name="P:Flame.Build.DescribedRetypedParameter.ParameterType">
      <summary>
 Gets the parameter's (default) type.
 </summary>
    </member>
  </members>
</doc>